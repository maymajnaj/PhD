#This is R code for analysis of datasets generated by 'Gossip in Organizations' and 'GODS: Gossip-oriented Dilemma Simulator' agent-based models.
#The purpose of the code below is replication of main results of the PhD thesis 'Agent-based modeling of gossip: organization, networks, reputation and cooperation' by Jan Majewski.
# NetLogo v.6.2.2
#
#Neither datsets, nor model code are available to the public at the moment (pending publication of scientific articles).
#Model code will be made available to the public once publication process concludes.
#Datasets will not be uploaded because of their size.
#
#R version 4.2.0
#Please note that some of the libraries might not work at the moment of replication (orignal analysis performed before September 30th 2023).



#read packages

library(signnet)
library(igraph)
library(sna)
library(xUCINET)
library(broom)
library(dplyr)
library(ggplot2)
library(tidyverse)


#make sure datasets generated by NetLogo are in the correct directory



#########
# Diffusion experiment
###

gos = read.csv("[name_of_dataset]", skip = 6, header = TRUE, sep = ",")

pos = gos[which(gos$new_gossip_frequency == 1000 & gos$valence_gossip > 0 & gos$seeders== 1 & gos$network.type != "empiricalfacebook"), ]
neg = gos[which(gos$new_gossip_frequency == 1000 & gos$valence_gossip < 0 & gos$seeders== 1 & gos$network.type != "empiricalfacebook"), ]
ggplot(pos, aes(x = precision..count.talkers.with..message.....count.talkers..2)) + geom_histogram(fill = "blue") +
  xlab("Wynik dyfuzji") + ylab("Częstotliwość")
ggplot(neg, aes(x = precision..count.talkers.with..message.....count.talkers..2)) + geom_histogram(fill = "red") +
  xlab("Wynik dyfuzji") + ylab("Częstotliwość")

par(mfrow=c(3, 1))

Mp = pos$precision..count.talkers.with..message.....count.talkers..2
Mn = neg$precision..count.talkers.with..message.....count.talkers..2
Mnew = new$precision..count.talkers.with..message.....count.talkers..2

hist(Mnew)
hist(Mp)
hist(Mn)


mean(Mp)
sd(Mp)
mean(Mn)
sd(Mn)
mean(Mnew)
sd(Mnew)

t.test(x=Mp, y= Mn)

unique(gos$seeders)

p1 = gos[which(gos$new_gossip_frequency == 1000 & gos$valence_gossip > 0 & gos$seeders== 1), ]
n1 = gos[which(gos$new_gossip_frequency == 1000 & gos$valence_gossip < 0 & gos$seeders== 1), ]
mean(p1$precision..count.talkers.with..message.....count.talkers..2)
sd(p1$precision..count.talkers.with..message.....count.talkers..2)
mean(n1$precision..count.talkers.with..message.....count.talkers..2)
sd(n1$precision..count.talkers.with..message.....count.talkers..2)

p1 = gos[which(gos$new_gossip_frequency == 1000 & gos$valence_gossip > 0 & gos$network.type != "empiricalfacebook"), ]
n1 = gos[which(gos$new_gossip_frequency == 1000 & gos$valence_gossip < 0 & gos$network.type != "empiricalfacebook"), ]
mean(p1$precision..count.talkers.with..message.....count.talkers..2)
sd(p1$precision..count.talkers.with..message.....count.talkers..2)
mean(n1$precision..count.talkers.with..message.....count.talkers..2)
sd(n1$precision..count.talkers.with..message.....count.talkers..2)

hist(n1$precision..count.talkers.with..message.....count.talkers..2)

ggplot(pos, aes(x = precision..count.talkers.with..message.....count.talkers..2)) + geom_histogram(fill = "blue") +
  xlab("Wynik dyfuzji") + ylab("Częstotliwość")
ggplot(neg, aes(x = precision..count.talkers.with..message.....count.talkers..2)) + geom_histogram(fill = "red") +
  xlab("Wynik dyfuzji") + ylab("Częstotliwość")

ggplot(gos[which(gos$new_gossip_frequency == 1000), ], aes(x = as.factor(network.type), y = precision..count.talkers.with..message.....count.talkers..2, fill = as.factor(seeders))) + 
  geom_boxplot() + 
  ylab("Poinformowani") + xlab("Sieć") + labs(title = "Wyniki dyfuzji", fill = "Ilość seedów")

par(mfrow=c(1,1))

hist(gos$seeders)

hist(gos$sum..rep..of.talkers)
hist(gos$count.talkers.with..hearhear.....maxhear., breaks = (n_distinct(gos$count.talkers.with..hearhear.....maxhear.) / 3), main = "Histogram liderów", xlab = "Ilość liderów", ylab = "Częstotliwość")
hist(gos$max..hearhear..of.talkers, breaks = n_distinct(gos$max..hearhear..of.talkers))
hist(gos$sum..rep..of.talkers, breaks = n_distinct(gos$sum..rep..of.talkers))

d = gos$sum..rep..of.talkers
e = gos$precision..count.talkers.with..message.....count.talkers..2

ggplot(gos[which(gos$new_gossip_frequency == 1000), ], aes(x = as.factor(network.type), y = sum..rep..of.talkers, fill = as.factor(seeders))) + 
  geom_boxplot() + 
  ylab("Poziom redundancji") + xlab("Sieć") + labs(title = "Komunikacja", fill = "Ilość seedów")

ggplot(gos[which(gos$network.type != "empiricalfacebook"),], aes(x = precision..count.talkers.with..message.....count.talkers..2, y = sum..rep..of.talkers, color = as.factor(seeders))) +
  geom_point() +
  ylab("Poziom redundancji") + xlab("Wynik dyfuzji") + labs(title = "Redundancja ze względu na wynik dyfuzji", color = "Ilość seedów")

# is redundancy caused by success in talking?
d = gos[which(gos$network.type != "empiricalfacebook"),]
lm01 = lm(d$sum..rep..of.talkers ~ d$precision..count.talkers.with..message.....count.talkers..2)
anova(lm01)
summary(lm01)
# is ending up a few leaders caused by unsuccessful diffusions?
plot(gos$count.talkers.with..hearhear.....maxhear. ~ gos$precision..count.talkers.with..message.....count.talkers..2)
lm02 = lm(gos$count.talkers.with..hearhear.....maxhear. ~ gos$precision..count.talkers.with..message.....count.talkers..2)
anova(lm02)
summary(lm02)

plot(gos[which(gos$network.type != "empiricalfacebook"),]$precision..count.talkers.with..message.....count.talkers..2, gos[which(gos$network.type != "empiricalfacebook"),]$count.talkers.with..hearhear.....maxhear.)
lm03 = lm(gos[which(gos$network.type != "empiricalfacebook"),]$count.talkers.with..hearhear.....maxhear. ~ gos[which(gos$network.type != "empiricalfacebook"),]$precision..count.talkers.with..message.....count.talkers..2)
anova(lm03)
summary(lm03)

plot(gos[which(gos$network.type != "empiricalfacebook" & gos$new_gossip_frequency < 200),]$count.talkers.with..hearhear.....maxhear. ~gos[which(gos$network.type != "empiricalfacebook" & gos$new_gossip_frequency < 200),]$precision..count.talkers.with..message.....count.talkers..2)
lm04 = lm(gos[which(gos$network.type != "empiricalfacebook" & gos$new_gossip_frequency < 200),]$count.talkers.with..hearhear.....maxhear. ~gos[which(gos$network.type != "empiricalfacebook" & gos$new_gossip_frequency < 200),]$precision..count.talkers.with..message.....count.talkers..2)
anova(lm04)
summary(lm04)

plot(gos[which(gos$network.type != "empiricalfacebook" & gos$precision..count.talkers.with..message.....count.talkers..2 > 0.1),]$precision..count.talkers.with..message.....count.talkers..2, gos[which(gos$network.type != "empiricalfacebook" & gos$precision..count.talkers.with..message.....count.talkers..2 > 0.1),]$count.talkers.with..hearhear.....maxhear.)
lm05 = lm(gos[which(gos$network.type != "empiricalfacebook" & gos$precision..count.talkers.with..message.....count.talkers..2 > 0.1),]$precision..count.talkers.with..message.....count.talkers..2 ~ gos[which(gos$network.type != "empiricalfacebook" & gos$precision..count.talkers.with..message.....count.talkers..2 > 0.1),]$count.talkers.with..hearhear.....maxhear.)
anova(lm05)
summary(lm05)

plot(gos[which(gos$precision..count.talkers.with..message.....count.talkers..2 > 0.1 ),]$precision..count.talkers.with..message.....count.talkers..2, gos[which(gos$precision..count.talkers.with..message.....count.talkers..2 > 0.1 ),]$count.talkers.with..hearhear.....maxhear.)
lm06 = lm(gos[which(gos$precision..count.talkers.with..message.....count.talkers..2 > 0.1 ),]$precision..count.talkers.with..message.....count.talkers..2 ~ gos[which(gos$precision..count.talkers.with..message.....count.talkers..2 > 0.1 ),]$count.talkers.with..hearhear.....maxhear.)
anova(lm06)
summary(lm06)

hist(gos[which(gos$precision..count.talkers.with..message.....count.talkers..2 > 0.3 & gos$network.type != "empiricalfacebook" & gos$new_gossip_frequency < 200),]$count.talkers.with..hearhear.....maxhear., breaks = unique(gos$count.talkers.with..hearhear.....maxhear) / 3)
#

unique(gos$network.type)


nf = gos[which(gos$network.type == "empiricalfacebook"),]
nl = gos[which(gos$network.type == "empiricallawyers"),]
nws = gos[which(gos$network.type == "WS71"),]
nsf = gos[which(gos$network.type == "SF71"),]

# fbfriends1.gml lawyers.gml SF71.gml WS71.gml

g1 = read.graph("fbfriends1.gml", format = "gml")
degree(g1)
gn = degree(g1)

j = sub('.*\\[(.*)\\].*', '\\1', nf$X.degree..of.talkers.with..hearhear.....maxhear.)
h = regmatches(j, gregexpr("[[:digit:]]+", j))
h = as.numeric(unlist(h))

datH = hist(h, breaks = n_distinct(h), plot = FALSE)
degH = hist(gn, breaks = n_distinct(gn), plot = FALSE)
par(mfcol = c(2,4))
plot(degH, col = "grey", xlab = "stopień", main = "Histogram stopnia")
plot(datH, col = "red", xlab = "stopień", main = "Stopień liderów")

g = read.csv("sf.csv", sep = "", header = FALSE)
g = as.matrix(g)
g1 = graph_from_adjacency_matrix(g, mode = "undirected")
degree(g1)
gn = degree(g1)

j = sub('.*\\[(.*)\\].*', '\\1', nsf$X.degree..of.talkers.with..hearhear.....maxhear.)
h = regmatches(j, gregexpr("[[:digit:]]+", j))
h = as.numeric(unlist(h))

datH = hist(h, breaks = n_distinct(h), plot = FALSE)
degH = hist(gn, breaks = n_distinct(gn), plot = FALSE)
plot(degH, col = "grey", xlab = "stopień", main = "Histogram stopnia")
plot(datH, col = "red", xlab = "stopień", main = "Stopień liderów")

rm(Mp, Mn, Mnew, gos)


##########
# Consensus experiment
###

cons_real = read.csv("[name_of_dataset]", skip = 6, header = TRUE, sep = ",")

unique(cons_real$topology)


ggplot(cons_real, aes(x = proportion, y = reputation_current_target, color = as.factor(gossip_valence))) + 
  geom_point() + 
  scale_fill_gradient(low = "blue", high = "red") +
  ylab("Reputacja") + xlab("Wynik dyfuzji") + 
  labs(title = "Reputacje w zależności od ilości poinformowanych i walencji", fill = "Walencja plotki")

hist(cons_real$mean_reputation, breaks = unique(cons_real$mean_reputation))
plot(cons_real$mean_reputation, cons_real$mean_opinion_gossipers)

ggplot(cons_real, aes(x = mean_reputation)) + geom_histogram(fill = "blue") +
  xlab("Średnia reputacja") + ylab("Częstotliwość")

hist(cons_real$reputation_current_target)
hist(cons_real$proportion)
plot(cons_real$proportion, cons_real$reputation_current_target)


ggplot(cons_real, aes(x = as.factor(topology), y = reputation_current_target, fill = as.factor(gossip_valence))) + 
  geom_boxplot(outlier.color = "black") + 
  ylab("Reputacja") + xlab("Topologia") + 
  labs(title = "Reputacje w zależności od sieci i walencji", fill = "Walencja plotki")


ggplot(cons_real, aes(x = as.factor(target), y = reputation_current_target, fill = as.factor(gossip_valence))) + 
  geom_boxplot(outlier.color = "black") + 
  ylab("Reputacja") + xlab("Typ celu") + 
  labs(title = "Reputacje w zależności od typu celu i walencji", fill = "Walencja plotki")

ggplot(cons_real, aes(x = as.factor(gossip_freq), y = reputation_current_target, fill = as.factor(gossip_valence))) + 
  geom_boxplot(outlier.color = "black") + 
  ylab("Reputacja") + xlab("Częstotliwość plotki") + 
  labs(title = "Reputacje w zależności od częstotliwości plotek i walencji", fill = "Walencja plotki")

ggplot(cons_real, aes(x = as.factor(opinion_diff), y = reputation_current_target, fill = as.factor(gossip_valence))) + 
  geom_boxplot(outlier.color = "black") + 
  ylab("Reputacja") + xlab("Różnica opinii") + 
  labs(title = "Reputacje w zależności od różnicy opinii i walencji", fill = "Walencja plotki")

ggplot(cons_real, aes(x = as.factor(target), y = reputation_current_target, fill = as.factor(gossip_freq))) + 
  geom_boxplot(outlier.color = "black") + 
  ylab("Reputacja") + xlab("Typ celu") + 
  labs(title = "Reputacje w zależności od wpływu typu celu i częstotliwości", fill = "Częstotliwość plotki")

#########
#OCB experiment
###

OCB <- read.csv("[name_of_dataset]", skip = 6, header = TRUE, sep = ",")

hist(OCB$meanOCB)
ggplot(OCB, aes(meanOCB, sdOCB)) + geom_point()

ggplot(OCB[which(OCB$initial_OCB == 0.5),], aes(x = as.factor(pervasiveness_of_negative_gossip), y = meanOCB, fill = as.factor(valence.gossip.change))) +
  geom_boxplot() +
  ylab("Średni poziom OCB") + xlab("Ilość negatywnej plotki") + 
  labs(title = "Wynik OCB w zależności od składu plotkowania dla średniej OCB", fill = "Zakres plotki")

ggplot(OCB[which(OCB$initial_OCB == 0.8),], aes(x = as.factor(pervasiveness_of_negative_gossip), y = meanOCB, fill = as.factor(valence.gossip.change))) +
  geom_boxplot() +
  ylab("Średni poziom OCB") + xlab("Ilość negatywnej plotki") + 
  labs(title = "Wynik OCB w zależności od składu plotkowania dla wysokiej OCB", fill = "Zakres plotki")

ggplot(OCB, aes(x = network.type, y = meanOCB, fill = as.factor(pervasiveness_of_negative_gossip))) +
  geom_boxplot() +
  ylab("Średni poziom OCB") + xlab("Topologia") + 
  labs(title = "OCB na różnych sieciach", fill = "Ilość plotki negatywnej")

ggplot(OCB, aes(x = meanOCB, y = minOCB, color = as.factor(valence.gossip.change))) +
  geom_point() +
  ylab("średni poziom OCB") + xlab("Minimalne OCB") + 
  labs(title = "", fill = "Zakres plotki")

unique(OCB$gossip_impact)
plot(OCB[which(OCB$new_gossip_frequency < 10 & OCB$initial_OCB == 0.5 & OCB$pervasiveness_of_negative_gossip == 0.9),]$meanOCB, OCB[which(OCB$new_gossip_frequency < 10 & OCB$initial_OCB == 0.5 & OCB$pervasiveness_of_negative_gossip == 0.9),]$valence.gossip.change)
mean(OCB[which(OCB$new_gossip_frequency == 3 & OCB$initial_OCB == 0.5 & OCB$pervasiveness_of_negative_gossip == 0.9 & OCB$gossip_impact == 0.9),]$meanOCB)

hist(OCB[which(OCB$new_gossip_frequency == 3 & OCB$initial_OCB == 0.5 & OCB$pervasiveness_of_negative_gossip == 0.9 & OCB$gossip_impact == 0.9),]$meanOCB)

hist(OCB[which(OCB$new_gossip_frequency == 3 & OCB$initial_OCB == 0.8 & OCB$pervasiveness_of_negative_gossip == 0.9 & OCB$gossip_impact == 0.9),]$meanOCB)


ggplot(OCB[which(OCB$new_gossip_frequency == 3 & OCB$initial_OCB == 0.5 & OCB$pervasiveness_of_negative_gossip == 0.9 & OCB$gossip_impact == 0.9),], aes(x = network.type, y = meanOCB, fill = as.factor(valence.gossip.change))) +
  geom_boxplot()

hist(OCB5$sdOCB)
hist(OCB8$sdOCB)

par(mfrow=c(3,1))
hist(OCB$maxOCB)
hist(OCB$meanOCB)
hist(OCB$minOCB)

par(mfcol=c(3,2))
hist(OCB[which(OCB$initial_OCB == 0.5),]$maxOCB, xlab = "Maksymalne wyniki", main = "Histogramy dla OCB 0.5")
hist(OCB[which(OCB$initial_OCB == 0.5),]$meanOCB, xlab = "Średnie wyniki", main = "")
hist(OCB[which(OCB$initial_OCB == 0.5),]$minOCB, xlab = "Minimalne wyniki", main = "")

par(mfrow=c(3,1))
hist(OCB[which(OCB$initial_OCB == 0.8),]$maxOCB, xlab = "Maksymalne wyniki", main = "Histogramy dla OCB 0.8")
hist(OCB[which(OCB$initial_OCB == 0.8),]$meanOCB, xlab = "Średnie wyniki", main = "")
hist(OCB[which(OCB$initial_OCB == 0.8),]$minOCB, xlab = "Minimalne wyniki", main = "")


par(mfrow=c(1,1))

# H1

hist(OCB$meanOCB, main = "Histogram średnich OCB")

ggplot(OCB, aes(x = as.factor(initial_OCB), y = meanOCB))+ 
  geom_boxplot() +
  ylab("Średni poziom OCB") + xlab("Początkowe OCB") + 
  labs(title = "Średnie wyniki OCB")

OCB5 = OCB[which(OCB$initial_OCB == 0.5),]
OCB8 = OCB[which(OCB$initial_OCB == 0.8),]

for (meanOCB in OCB5) {
  OCB5$dif = OCB5$meanOCB - 0.5
}
for (meanOCB in OCB8) {
  OCB8$dif = OCB8$meanOCB - 0.8
}
hist(OCB5$dif)
mean(OCB5$dif)
sd(OCB5$dif)
lm01 = glm(OCB5$dif ~ 0)
anova(lm01)
summary(lm01)

hist(OCB8$dif)

t.test(OCB5$dif, mu = 0)
t.test(OCB8$dif, mu = 0)


OCBm = OCB[which(OCB$minOCB < 0.2),]
hist(OCBm$new_gossip_frequency)
hist(OCBm$valence.gossip.change)
hist(OCBm$pervasiveness_of_negative_gossip)
hist(OCBm$gossip_impact)

OCBmu = OCB[which(OCB$mean < 0.2),]
hist(OCBmu$new_gossip_frequency)
hist(OCBmu$valence.gossip.change)
hist(OCBmu$pervasiveness_of_negative_gossip)
hist(OCBmu$gossip_impact)

ggplot(OCB[which(OCB$initial_OCB == 0.5),], aes(x = as.factor(pervasiveness_of_negative_gossip), y = meanOCB, fill = as.factor(valence.gossip.change))) +
  geom_boxplot() +
  ylab("Średni poziom OCB") + xlab("Ilość negatywnej plotki") + 
  labs(title = "Wynik OCB w zależności od składu plotkowania dla średniej OCB", fill = "Zakres plotki")

ggplot(OCB[which(OCB$initial_OCB == 0.8),], aes(x = as.factor(pervasiveness_of_negative_gossip), y = meanOCB, fill = as.factor(valence.gossip.change))) +
  geom_boxplot() +
  ylab("Średni poziom OCB") + xlab("Ilość negatywnej plotki") + 
  labs(title = "Wynik OCB w zależności od składu plotkowania dla wysokiej OCB", fill = "Zakres plotki")


ggplot(OCB[which(OCB$initial_OCB == 0.5),], aes(x = as.factor(pervasiveness_of_negative_gossip), y = meanOCB, fill = as.factor(new_gossip_frequency))) +
  geom_boxplot() +
  ylab("Średni poziom OCB") + xlab("Ilość negatywnej plotki") + 
  labs(title = "Wynik OCB w zależności od składu plotkowania dla średniej OCB", fill = "Częstotliowość plotki")

ggplot(OCB[which(OCB$initial_OCB == 0.8),], aes(x = as.factor(pervasiveness_of_negative_gossip), y = meanOCB, fill = as.factor(new_gossip_frequency))) +
  geom_boxplot() +
  ylab("Średni poziom OCB") + xlab("Ilość negatywnej plotki") + 
  labs(title = "Wynik OCB w zależności od składu plotkowania dla wysokiej OCB", fill = "Częstotliowość plotki")


ggplot(OCB[which(OCB$initial_OCB == 0.5),], aes(x = as.factor(pervasiveness_of_negative_gossip), y = meanOCB, fill = as.factor(gossip_impact))) +
  geom_boxplot() +
  ylab("Średni poziom OCB") + xlab("Ilość negatywnej plotki") + 
  labs(title = "Wynik OCB w zależności od składu plotkowania dla średniej OCB", fill = "Wpływ plotki")

ggplot(OCB[which(OCB$initial_OCB == 0.8),], aes(x = as.factor(pervasiveness_of_negative_gossip), y = meanOCB, fill = as.factor(gossip_impact))) +
  geom_boxplot() +
  ylab("Średni poziom OCB") + xlab("Ilość negatywnej plotki") + 
  labs(title = "Wynik OCB w zależności od składu plotkowania dla wysokiej OCB", fill = "Wpływ plotki")

ggplot(OCB[which(OCB$initial_OCB == 0.5),], aes(x = as.factor(new_gossip_frequency), y = meanOCB, fill = as.factor(gossip_impact))) +
  geom_boxplot() +
  ylab("Średni poziom OCB") + xlab("Częstotliwość negatywnej plotki") + 
  labs(title = "Wynik OCB w zależności od składu plotkowania dla średniej OCB", fill = "Wpływ plotki")

ggplot(OCB[which(OCB$initial_OCB == 0.8),], aes(x = as.factor(new_gossip_frequency), y = meanOCB, fill = as.factor(gossip_impact))) +
  geom_boxplot() +
  ylab("Średni poziom OCB") + xlab("Częstotliwość negatywnej plotki") + 
  labs(title = "Wynik OCB w zależności od składu plotkowania dla wysokiej OCB", fill = "Wpływ plotki")


ggplot(OCB, aes(meanOCB, sdOCB, fill = as.factor())) + geom_point()


# H2

unique(OCB$new_gossip_frequency)

OCB$H2 = (OCB$meanOCB - OCB$minOCB) / OCB$sdOCB

ggplot(OCB, aes(x = H2, fill = as.factor(initial_OCB))) +
  geom_histogram(color = "#e9ecef", alpha = 0.55, position = 'identity') +
  ylab("Częstotliwość") + xlab("Ilość SD") + 
  labs(title = "Porównanie odległości minimalnego wyniku od średniej OCB", fill = "Początkowe OCB")

t.test(x = OCB[which(OCB$initial_OCB ==0.5),]$H2, y = OCB[which(OCB$initial_OCB ==0.8),]$H2)

plot(ecdf(OCB[which(OCB$initial_OCB ==0.5),]$H2), col = "red", main = "CDF odległości wyników minimalnych")
plot(ecdf(OCB[which(OCB$initial_OCB ==0.8),]$H2), add = TRUE, lty = "dashed", col = "blue")

mean(OCB[which(OCB$initial_OCB ==0.5),]$sdOCB)
sd(OCB[which(OCB$initial_OCB ==0.5),]$sdOCB)
mean(OCB[which(OCB$initial_OCB ==0.8),]$sdOCB)
sd(OCB[which(OCB$initial_OCB ==0.8),]$sdOCB)

t.test(x = OCB[which(OCB$initial_OCB ==0.5),]$sdOCB, y = OCB[which(OCB$initial_OCB ==0.8),]$sdOCB)

cor.test(x = OCB[which(OCB$initial_OCB ==0.5),]$sdOCB, y = OCB[which(OCB$initial_OCB ==0.5),]$H2)
cor.test(x = OCB[which(OCB$initial_OCB ==0.8),]$sdOCB, y = OCB[which(OCB$initial_OCB ==0.8),]$H2)

ggplot(OCB[which(OCB$initial_OCB ==0.5),], aes(sdOCB, H2)) + geom_point(size = 0.8)
ggplot(OCB[which(OCB$initial_OCB ==0.8),], aes(sdOCB, H2)) + geom_point(size = 0.8)


# H3 Ilość negatywnej plotki 
#(udział w ogóle plotek i częstotliwość nowych plotek) 
#ma większe znaczenie dla obniżania OCB, niż jej walencja (dotkliwość).

OCB$H3a = ((1 - OCB$pervasiveness_of_negative_gossip) * OCB$valence.gossip.change) - (OCB$pervasiveness_of_negative_gossip * OCB$valence.gossip.change)
OCB$H3b = OCB$H3a * (1000 / OCB$new_gossip_frequency)
OCB$H3c = OCB$H3b * OCB$gossip_impact
OCB$H3d = OCB$meanOCB - OCB$initial_OCB

ggplot(OCB, aes(H3c, H3d, color = as.factor(network.type))) + geom_point(size = 0.7, alpha = 0.4)   +
  ylab("Zmiana OCB") + xlab("Kumulatywny efekt plotki") + 
  labs(title = "Czynniki plotkowe kształtujące OCB", color = "Topologia")


ggplot(OCB[which(OCB$network.type == "hungarian_school_1"),], aes(H3c, H3d, color = as.factor(pervasiveness_of_negative_gossip))) + geom_point(size = 0.9, alpha = 0.5)   +
  ylab("OCB change") + xlab("Cumulative gossip effect") + 
  labs(title = "OCB shaping hungarian_school_1", color = "Amount of negative gossip")

ggplot(OCB[which(OCB$network.type == "hungarian_school_1"),], aes(H3c, H3d, color = as.factor(gossip_impact))) + geom_point(size = 0.9, alpha = 0.5)   +
  ylab("OCB change") + xlab("Cumulative gossip effect") + 
  labs(title = "OCB shaping hungarian_school_1", color = "Gossip impact")

ggplot(OCB[which(OCB$network.type == "hungarian_school_1"),], aes(H3c, H3d, color = as.factor(valence.gossip.change))) + geom_point(size = 0.9, alpha = 0.5)   +
  ylab("OCB change") + xlab("Cumulative gossip effect") + 
  labs(title = "OCB shaping hungarian_school_1", color = "Valence of gossip")

ggplot(OCB[which(OCB$network.type == "hungarian_school_1"),], aes(H3c, H3d, color = as.factor(new_gossip_frequency))) + geom_point(size = 0.9, alpha = 0.5)   +
  ylab("OCB change") + xlab("Cumulative gossip effect") + 
  labs(title = "OCB shaping hungarian_school_1", color = "Frequency of new gossip")

#

ggplot(OCB[which(OCB$network.type == "hungarian_school_2"),], aes(H3c, H3d, color = as.factor(pervasiveness_of_negative_gossip))) + geom_point(size = 0.9, alpha = 0.5)   +
  ylab("OCB change") + xlab("Cumulative gossip effect") + 
  labs(title = "OCB shaping hungarian_school_2", color = "Amount of negative gossip")

ggplot(OCB[which(OCB$network.type == "hungarian_school_2"),], aes(H3c, H3d, color = as.factor(gossip_impact))) + geom_point(size = 0.9, alpha = 0.5)   +
  ylab("OCB change") + xlab("Cumulative gossip effect") + 
  labs(title = "OCB shaping hungarian_school_2", color = "Gossip impact")

ggplot(OCB[which(OCB$network.type == "hungarian_school_2"),], aes(H3c, H3d, color = as.factor(valence.gossip.change))) + geom_point(size = 0.9, alpha = 0.5)   +
  ylab("OCB change") + xlab("Cumulative gossip effect") + 
  labs(title = "OCB shaping hungarian_school_2", color = "Valence of gossip")

ggplot(OCB[which(OCB$network.type == "hungarian_school_2"),], aes(H3c, H3d, color = as.factor(new_gossip_frequency))) + geom_point(size = 0.9, alpha = 0.5)   +
  ylab("OCB change") + xlab("Cumulative gossip effect") + 
  labs(title = "OCB shaping hungarian_school_2", color = "Frequency of new gossip")


lm03 = lm(data = OCB, H3d ~ H3c)
anova(lm03)
summary(lm03)

lm04 = lm(data = OCB, H3d ~ pervasiveness_of_negative_gossip + new_gossip_frequency + valence.gossip.change + network.type + meanOCB + sdOCB + H2 + H3c)
anova(lm04)
summary(lm04)

unique(OCB$network.type)



#########
#TG experiment
###

TG = read.csv("[name_of_dataset]", skip = 6, header = TRUE, sep = ",")



#
#
# H5
# Bardziej selektywny dostęp do informacji reputacyjnych (plotkowanie realistyczne) sprawi, że wyniki będą niższe dla obu grup. 

TG$g = TG$difCD
TG[which(TG$gossip. == "true"),]$g = 1
TG[which(TG$gossip. == "false"),]$g = 0
mean(TG$g)

cor.test(x = TG$mres, y = TG$g)

lm01 = lm(data = TG, mres ~ prop_D + reputation_threshold + gossip. + network.type)
summary(lm01)
anova(lm01)
write.csv(tidy(lm01),"coef.cvs")

ggplot(TG, aes(x = as.factor(gossip.), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot() +
  ylab("Średni wynik") + xlab("Czy odbywa sie plotkowanie?") + 
  labs(title = "Porównanie średnich wyników dla mechanizmów transmisji", fill = "Próg")
ggplot(TG, aes(x = as.factor(gossip.), y = mres, fill = as.factor(prop_D))) + geom_boxplot() +
  ylab("Średni wynik") + xlab("Czy odbywa sie plotkowanie?") + 
  labs(title = "", fill = "Ilość D")
ggplot(TG, aes(x = as.factor(gossip.), y = mres, fill = as.factor(network.type))) + geom_boxplot() +
  ylab("Średni wynik") + xlab("Czy odbywa sie plotkowanie?") + 
  labs(title = "", fill = "Topologia")

ggplot(TG, aes(x = as.factor(gossip.), y = mresC, fill = as.factor(reputation_threshold))) + geom_boxplot() +
  ylab("Średni wynik") + xlab("Czy odbywa sie plotkowanie?") + 
  labs(title = "Porównanie średnich wyników C", fill = "Próg")
ggplot(TG, aes(x = as.factor(gossip.), y = mresC, fill = as.factor(prop_D))) + geom_boxplot() +
  ylab("Średni wynik") + xlab("Czy odbywa sie plotkowanie?") + 
  labs(title = "", fill = "Ilość D")
ggplot(TG, aes(x = as.factor(gossip.), y = mresC, fill = as.factor(network.type))) + geom_boxplot() +
  ylab("Średni wynik") + xlab("Czy odbywa sie plotkowanie?") + 
  labs(title = "", fill = "Topologia")

ggplot(TG, aes(x = as.factor(gossip.), y = mresD, fill = as.factor(reputation_threshold))) + geom_boxplot() +
  ylab("Średni wynik") + xlab("Czy odbywa sie plotkowanie?") + 
  labs(title = "Porównanie średnich wyników D", fill = "Próg")
ggplot(TG, aes(x = as.factor(gossip.), y = mresD, fill = as.factor(prop_D))) + geom_boxplot() +
  ylab("Średni wynik") + xlab("Czy odbywa sie plotkowanie?") + 
  labs(title = "", fill = "Ilość D")
ggplot(TG, aes(x = as.factor(gossip.), y = mresD, fill = as.factor(network.type))) + geom_boxplot() +
  ylab("Średni wynik") + xlab("Czy odbywa sie plotkowanie?") + 
  labs(title = "", fill = "Topologia")

#
#
#

cor(x = TG$difCD, y = TG$sumres)
cor(x = TG$mres, y = TG$sumres)
cor(x = TG$reputation_threshold, y = TG$sumres)
cor(x = TG[which(TG$gossip. == "true"),]$reputation_threshold, y = TG[which(TG$gossip. == "true"),]$sumres)
cor(x = TG[which(TG$difCD > 1),]$reputation_threshold, y = TG[which(TG$difCD > 1),]$sumres)
cor(y = TG$difCD, x = TG$reputation_threshold)

plot(x = TG$reputation_threshold, y = TG$difCD)

hist(TG[which(TG$difCD > 0),]$reputation_threshold)
hist(TG[which(TG$difCD > 0),]$prop_D, breaks = unique(TG$prop_D))
hist(TG[which(TG$difCD > 0),]$reputation_influence, breaks = unique(TG$reputation_influence))
ggplot(TG[which(TG$difCD > 0),], aes(x = as.factor(gossip.))) + stat_count()
ggplot(TG[which(TG$difCD > 0),], aes(x = as.factor(network.type))) + stat_count()

hist(TG[which(TG$difCD > 0),]$mres)

cor.test(TG[which(TG$difCD > 0),]$mres, TG[which(TG$difCD > 0),]$mresC)
cor.test(TG[which(TG$difCD > 0),]$mres, TG[which(TG$difCD > 0),]$mresD)
cor.test(TG[which(TG$difCD > 0),]$mres, TG[which(TG$difCD > 0),]$sumresC)
cor.test(TG[which(TG$difCD > 0),]$mres, TG[which(TG$difCD > 0),]$sumresD)
cor.test(TG[which(TG$difCD > 0),]$sumres, TG[which(TG$difCD > 0),]$sumresC)
cor.test(TG[which(TG$difCD > 0),]$sumres, TG[which(TG$difCD > 0),]$sumresD)

cor.test(TG[which(TG$difCD < 0),]$mres, TG[which(TG$difCD < 0),]$mresC)
cor.test(TG[which(TG$difCD < 0),]$mres, TG[which(TG$difCD < 0),]$mresD)
cor.test(TG[which(TG$difCD < 0),]$mres, TG[which(TG$difCD < 0),]$sumresC)
cor.test(TG[which(TG$difCD < 0),]$mres, TG[which(TG$difCD < 0),]$sumresD)
cor.test(TG[which(TG$difCD < 0),]$sumres, TG[which(TG$difCD < 0),]$sumresC)
cor.test(TG[which(TG$difCD < 0),]$sumres, TG[which(TG$difCD < 0),]$sumresD)


cor.test(TG$prop_D, TG$sumres)
cor.test(TG$prop_D, TG$mres)

cor.test(TG[which(TG$difCD > 0),]$prop_D, TG[which(TG$difCD > 0),]$sumresC)
cor.test(TG[which(TG$difCD > 0),]$prop_D, TG[which(TG$difCD > 0),]$mresC)

cor.test(TG[which(TG$difCD < 0),]$prop_D, TG[which(TG$difCD < 0),]$sumresD)
cor.test(TG[which(TG$difCD < 0),]$prop_D, TG[which(TG$difCD < 0),]$mresD)


cor.test(TG$reputation_threshold, TG$sumres)
cor.test(TG$reputation_threshold, TG$mres)

cor.test(TG[which(TG$difCD > 0),]$reputation_threshold, TG[which(TG$difCD > 0),]$sumresC)
cor.test(TG[which(TG$difCD > 0),]$reputation_threshold, TG[which(TG$difCD > 0),]$mresC)

cor.test(TG[which(TG$difCD < 0),]$reputation_threshold, TG[which(TG$difCD < 0),]$sumresC)
cor.test(TG[which(TG$difCD < 0),]$reputation_threshold, TG[which(TG$difCD < 0),]$mresC)




ggplot(TG, aes(x = as.factor(prop_D), y = sumres, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG, aes(x = as.factor(prop_D), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot()

ggplot(TG[which(TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = sumres, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = sumres, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot()

ggplot(TG[which(TG$difCD > 0),], aes(x = as.factor(prop_D), y = sumres, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0),], aes(x = as.factor(prop_D), y = sumres, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD > 0),], aes(x = as.factor(prop_D), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0),], aes(x = as.factor(prop_D), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot()


ggplot(TG[which(TG$difCD > 0 & TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = sumres, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0 & TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = sumres, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD > 0 & TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = sumres, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0 & TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = sumres, fill = as.factor(reputation_threshold))) + geom_boxplot()

ggplot(TG[which(TG$difCD > 0 & TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0 & TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD > 0 & TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0 & TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot()


count(TG[which(TG$difCD > 0 & TG$gossip. == "true" & TG$prop_D > 0.8),])
count(TG[which(TG$difCD > 0 & TG$gossip. == "false" & TG$prop_D > 0.8),])
hist(TG[which(TG$difCD > 0 & TG$gossip. == "true"),]$prop_D)
hist(TG[which(TG$difCD > 0 & TG$gossip. == "false"),]$prop_D)

count(TG[which(TG$difCD < 0 & TG$gossip. == "true" & TG$prop_D < 0.2),])
count(TG[which(TG$difCD < 0 & TG$gossip. == "false" & TG$prop_D < 0.2),])
hist(TG[which(TG$difCD < 0 & TG$gossip. == "true"),]$prop_D)
hist(TG[which(TG$difCD < 0 & TG$gossip. == "false"),]$prop_D)


count(TG[which(TG$difCD > 0 & TG$gossip. == "true" & TG$reputation_threshold == 0 & TG$prop_D == 0.9),])
count(TG[which(TG$difCD > 0 & TG$gossip. == "false" & TG$reputation_threshold == 0 & TG$prop_D == 0.9),])
count(TG[which(TG$difCD < 0 & TG$gossip. == "true" & TG$reputation_threshold == 0 & TG$prop_D == 0.1),])
count(TG[which(TG$difCD < 0 & TG$gossip. == "false" & TG$reputation_threshold == 0 & TG$prop_D == 0.1),])
count(TG[which(TG$difCD > 0 & TG$gossip. == "true" & TG$reputation_threshold == 0.1 & TG$prop_D == 0.9),])
count(TG[which(TG$difCD > 0 & TG$gossip. == "false" & TG$reputation_threshold == 0.1 & TG$prop_D == 0.9),])
count(TG[which(TG$difCD < 0 & TG$gossip. == "true" & TG$reputation_threshold == 0.1 & TG$prop_D == 0.1),])
count(TG[which(TG$difCD < 0 & TG$gossip. == "false" & TG$reputation_threshold == 0.1 & TG$prop_D == 0.1),])

count(TG[which(TG$difCD > 0 & TG$gossip. == "true" & TG$reputation_threshold == 0 & TG$prop_D == 0.8),])
count(TG[which(TG$difCD > 0 & TG$gossip. == "false" & TG$reputation_threshold == 0 & TG$prop_D == 0.8),])
count(TG[which(TG$difCD < 0 & TG$gossip. == "true" & TG$reputation_threshold == 0 & TG$prop_D == 0.2),])
count(TG[which(TG$difCD < 0 & TG$gossip. == "false" & TG$reputation_threshold == 0 & TG$prop_D == 0.2),])
count(TG[which(TG$difCD > 0 & TG$gossip. == "true" & TG$reputation_threshold == 0.1 & TG$prop_D == 0.8),])
count(TG[which(TG$difCD > 0 & TG$gossip. == "false" & TG$reputation_threshold == 0.1 & TG$prop_D == 0.8),])
count(TG[which(TG$difCD < 0 & TG$gossip. == "true" & TG$reputation_threshold == 0.1 & TG$prop_D == 0.2),])
count(TG[which(TG$difCD < 0 & TG$gossip. == "false" & TG$reputation_threshold == 0.1 & TG$prop_D == 0.2),])


par(mfrow=c(1,1))
par(mfrow=c(4,1))
# how do C win in those conditions?



hist(TG[which(TG$difCD > 0 & TG$gossip. == "true" & TG$reputation_threshold == -0.3),]$prop_D, breaks = 10, main = "Gossip condition", xlab = -0.3)
hist(TG[which(TG$difCD > 0 & TG$gossip. == "false" & TG$reputation_threshold == -0.3),]$prop_D, breaks = 10, main = "Transmission condition", xlab = -0.3)

hist(TG[which(TG$difCD > 0 & TG$gossip. == "true" & TG$reputation_threshold == -0.2),]$prop_D, breaks = 10, main = "Gossip condition", xlab = -0.2)
hist(TG[which(TG$difCD > 0 & TG$gossip. == "false" & TG$reputation_threshold == -0.2),]$prop_D, breaks = 10, main = "Transmission condition", xlab = -0.2)

hist(TG[which(TG$difCD > 0 & TG$gossip. == "true" & TG$reputation_threshold == -0.1),]$prop_D, breaks = 10, main = "Gossip condition", xlab = -0.1)
hist(TG[which(TG$difCD > 0 & TG$gossip. == "false" & TG$reputation_threshold == -0.1),]$prop_D, breaks = 10, main = "Transmission condition", xlab = -0.1)
dev.off()
hist(TG[which(TG$difCD > 0 & TG$gossip. == "true" & TG$reputation_threshold == 0),]$prop_D, breaks = 10, main = "Gossip condition", xlab = 0)
hist(TG[which(TG$difCD > 0 & TG$gossip. == "false" & TG$reputation_threshold == 0),]$prop_D, breaks = 10, main = "Transmission condition", xlab = 0)
dev.off()
hist(TG[which(TG$difCD > 0 & TG$gossip. == "true" & TG$reputation_threshold == 0.1),]$prop_D, breaks = 10, main = "Gossip condition", xlab = 0.1)
hist(TG[which(TG$difCD > 0 & TG$gossip. == "false" & TG$reputation_threshold == 0.1),]$prop_D, breaks = 10, main = "Transmission condition", xlab = 0.1)
dev.off()
hist(TG[which(TG$difCD > 0 & TG$gossip. == "true" & TG$reputation_threshold == 0.2),]$prop_D, breaks = 10, main = "Gossip condition", xlab = 0.2)
hist(TG[which(TG$difCD > 0 & TG$gossip. == "false" & TG$reputation_threshold == 0.2),]$prop_D, breaks = 10, main = "Transmission condition", xlab = 0.2)
dev.off()
hist(TG[which(TG$difCD > 0 & TG$gossip. == "true" & TG$reputation_threshold == 0.3),]$prop_D, breaks = 10, main = "Gossip condition", xlab = 0.3)
hist(TG[which(TG$difCD > 0 & TG$gossip. == "false" & TG$reputation_threshold == 0.3),]$prop_D, breaks = 10, main = "Transmission condition", xlab = 0.3)


jpeg("C_6.jpeg", width = 1300, height = 530)
par(mfrow=c(1,2))
dev.off()

# how do D win in those conditions?
hist(TG[which(TG$difCD < 0 & TG$gossip. == "true" & TG$reputation_threshold == -0.3),]$prop_D, breaks = 10, main = "Gossip condition", xlab = -0.3)
hist(TG[which(TG$difCD < 0 & TG$gossip. == "false" & TG$reputation_threshold == -0.3),]$prop_D, breaks = 10, main = "Transmission condition", xlab = -0.3)
dev.off()
hist(TG[which(TG$difCD < 0 & TG$gossip. == "true" & TG$reputation_threshold == -0.2),]$prop_D, breaks = 10, main = "Gossip condition", xlab = -0.2)
hist(TG[which(TG$difCD < 0 & TG$gossip. == "false" & TG$reputation_threshold == -0.2),]$prop_D, breaks = 10, main = "Transmission condition", xlab = -0.2)
dev.off()
hist(TG[which(TG$difCD < 0 & TG$gossip. == "true" & TG$reputation_threshold == -0.1),]$prop_D, breaks = 10, main = "Gossip condition", xlab = -0.1)
hist(TG[which(TG$difCD < 0 & TG$gossip. == "false" & TG$reputation_threshold == -0.1),]$prop_D, breaks = 10, main = "Transmission condition", xlab = -0.1)
dev.off()
hist(TG[which(TG$difCD < 0 & TG$gossip. == "true" & TG$reputation_threshold == 0),]$prop_D, breaks = 10, main = "Gossip condition", xlab = 0)
hist(TG[which(TG$difCD < 0 & TG$gossip. == "false" & TG$reputation_threshold == 0),]$prop_D, breaks = 10, main = "Transmission condition", xlab = 0)
dev.off()
hist(TG[which(TG$difCD < 0 & TG$gossip. == "true" & TG$reputation_threshold == 0.1),]$prop_D, breaks = 10, main = "Gossip condition", xlab = 0.1)
hist(TG[which(TG$difCD < 0 & TG$gossip. == "false" & TG$reputation_threshold == 0.1),]$prop_D, breaks = 10, main = "Transmission condition", xlab = 0.1)
dev.off()
hist(TG[which(TG$difCD < 0 & TG$gossip. == "true" & TG$reputation_threshold == 0.2),]$prop_D, breaks = 10, main = "Gossip condition", xlab = 0.2)
hist(TG[which(TG$difCD < 0 & TG$gossip. == "false" & TG$reputation_threshold == 0.2),]$prop_D, breaks = 10, main = "Transmission condition", xlab = 0.2)
dev.off()
hist(TG[which(TG$difCD < 0 & TG$gossip. == "true" & TG$reputation_threshold == 0.3),]$prop_D, breaks = 10, main = "Gossip condition", xlab = 0.3)
hist(TG[which(TG$difCD < 0 & TG$gossip. == "false" & TG$reputation_threshold == 0.3),]$prop_D, breaks = 10, main = "Transmission condition", xlab = 0.3)

jpeg("D_4.jpeg", width = 1300, height = 530)
par(mfrow=c(1,2))
dev.off()

mean(TG[which(TG$reputation_threshold == -0.3),]$sumres)
sd(TG[which(TG$reputation_threshold == -0.3),]$sumres)
mean(TG[which(TG$reputation_threshold == -0.2),]$sumres)
sd(TG[which(TG$reputation_threshold == -0.2),]$sumres)
mean(TG[which(TG$reputation_threshold == -0.1),]$sumres)
sd(TG[which(TG$reputation_threshold == -0.1),]$sumres)
mean(TG[which(TG$reputation_threshold == 0),]$sumres)
sd(TG[which(TG$reputation_threshold == 0),]$sumres)
mean(TG[which(TG$reputation_threshold == 0.1),]$sumres)
sd(TG[which(TG$reputation_threshold == 0.1),]$sumres)
mean(TG[which(TG$reputation_threshold == 0.2),]$sumres)
sd(TG[which(TG$reputation_threshold == 0.2),]$sumres)
mean(TG[which(TG$reputation_threshold == 0.3),]$sumres)
sd(TG[which(TG$reputation_threshold == 0.3),]$sumres)

mean(TG[which(TG$reputation_threshold == -0.3),]$sumresC)
sd(TG[which(TG$reputation_threshold == -0.3),]$sumresC)
mean(TG[which(TG$reputation_threshold == -0.2),]$sumresC)
sd(TG[which(TG$reputation_threshold == -0.2),]$sumresC)
mean(TG[which(TG$reputation_threshold == -0.1),]$sumresC)
sd(TG[which(TG$reputation_threshold == -0.1),]$sumresC)
mean(TG[which(TG$reputation_threshold == 0),]$sumresC)
sd(TG[which(TG$reputation_threshold == 0),]$sumresC)
mean(TG[which(TG$reputation_threshold == 0.1),]$sumresC)
sd(TG[which(TG$reputation_threshold == 0.1),]$sumresC)
mean(TG[which(TG$reputation_threshold == 0.2),]$sumresC)
sd(TG[which(TG$reputation_threshold == 0.2),]$sumresC)
mean(TG[which(TG$reputation_threshold == 0.3),]$sumresC)
sd(TG[which(TG$reputation_threshold == 0.3),]$sumresC)

mean(TG[which(TG$reputation_threshold == -0.3),]$sumresD)
sd(TG[which(TG$reputation_threshold == -0.3),]$sumresD)
mean(TG[which(TG$reputation_threshold == -0.2),]$sumresD)
sd(TG[which(TG$reputation_threshold == -0.2),]$sumresD)
mean(TG[which(TG$reputation_threshold == -0.1),]$sumresD)
sd(TG[which(TG$reputation_threshold == -0.1),]$sumresD)
mean(TG[which(TG$reputation_threshold == 0),]$sumresD)
sd(TG[which(TG$reputation_threshold == 0),]$sumresD)
mean(TG[which(TG$reputation_threshold == 0.1),]$sumresD)
sd(TG[which(TG$reputation_threshold == 0.1),]$sumresD)
mean(TG[which(TG$reputation_threshold == 0.2),]$sumresD)
sd(TG[which(TG$reputation_threshold == 0.2),]$sumresD)
mean(TG[which(TG$reputation_threshold == 0.3),]$sumresD)
sd(TG[which(TG$reputation_threshold == 0.3),]$sumresD)





#how do C fare?
ggplot(TG[which(TG$difCD > 0),], aes(x = as.factor(prop_D), y = sumresC, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0),], aes(x = as.factor(prop_D), y = sumresC, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD > 0),], aes(x = as.factor(prop_D), y = mresC, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0),], aes(x = as.factor(prop_D), y = mresC, fill = as.factor(reputation_threshold))) + geom_boxplot()

ggplot(TG[which(TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = sumresC, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = sumresC, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = mresC, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = mresC, fill = as.factor(reputation_threshold))) + geom_boxplot()


ggplot(TG[which(TG$difCD > 0 & TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = sumresC, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0 & TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = sumresC, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD > 0 & TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = sumresC, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0 & TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = sumresC, fill = as.factor(reputation_threshold))) + geom_boxplot()

ggplot(TG[which(TG$difCD > 0 & TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = mresC, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0 & TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = mresC, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD > 0 & TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = mresC, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0 & TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = mresC, fill = as.factor(reputation_threshold))) + geom_boxplot()


#how do D fare?
ggplot(TG[which(TG$difCD > 0),], aes(x = as.factor(prop_D), y = sumresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0),], aes(x = as.factor(prop_D), y = sumresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD > 0),], aes(x = as.factor(prop_D), y = mresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0),], aes(x = as.factor(prop_D), y = mresD, fill = as.factor(reputation_threshold))) + geom_boxplot()

ggplot(TG[which(TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = sumresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = sumresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = mresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = mresD, fill = as.factor(reputation_threshold))) + geom_boxplot()

ggplot(TG[which(TG$difCD > 0 & TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = sumresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0 & TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = sumresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD > 0 & TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = sumresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0 & TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = sumresD, fill = as.factor(reputation_threshold))) + geom_boxplot()

ggplot(TG[which(TG$difCD > 0 & TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = mresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0 & TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = mresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD > 0 & TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = mresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0 & TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = mresD, fill = as.factor(reputation_threshold))) + geom_boxplot()


# C win
ggplot(TG[which(TG$difCD > 0 & TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = sumresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD > 0 & TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = sumresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
# D win
ggplot(TG[which(TG$difCD < 0 & TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = sumresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0 & TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = sumresD, fill = as.factor(reputation_threshold))) + geom_boxplot()

#C win
ggplot(TG[which(TG$difCD > 0 & TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = mresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD > 0 & TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = mresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
#D win
ggplot(TG[which(TG$difCD < 0 & TG$gossip. == "true"),], aes(x = as.factor(prop_D), y = mresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG[which(TG$difCD < 0 & TG$gossip. == "false"),], aes(x = as.factor(prop_D), y = mresD, fill = as.factor(reputation_threshold))) + geom_boxplot()




TG$sumd = TG$sumresC - TG$sumresD
hist(TG$sumd)
TG$dsd = (TG$mresC - TG$mresD) / TG$sdres

ggplot(TG, aes(x = sumd, fill = as.factor(gossip.))) +
  geom_histogram(color = "#e9ecef", alpha = 0.15, position = 'identity', bins  = 60) +
  ylab("Częstotliwość") + xlab("Różnica w odchyleniach standardowych") + 
  labs(title = "Porównanie różnic wyników między C a D", fill = "Plotkowanie")
ggplot(TG, aes(x = sumd, fill = as.factor(reputation_threshold))) +
  geom_histogram(color = "#e9ecef", alpha = 0.15, position = 'identity', bins  = 60) +
  ylab("Częstotliwość") + xlab("Różnica w odchyleniach standardowych") + 
  labs(title = "Porównanie różnic wyników między C a D", fill = "Plotkowanie")
ggplot(TG, aes(x = sumd, fill = as.factor(prop_D))) +
  geom_histogram(color = "#e9ecef", alpha = 0.15, position = 'identity', bins  = 60) +
  ylab("Częstotliwość") + xlab("Różnica w odchyleniach standardowych") + 
  labs(title = "Porównanie różnic wyników między C a D", fill = "Plotkowanie")

lm03 = lm(data = TG, sumd ~ prop_D + reputation_threshold + gossip. + network.type)
anova(lm03)
summary(lm03)

t.test(x = TG$sumresC, y = TG$sumresD, alternative = "g")

wilcox.test(x = TG$sumresC, y = TG$sumresD, alternative = "g")

ks.test(x = TG$sumresC, y = TG$sumresD, alternative = "g")


par(mfrow = c(2,1))
plot(ecdf(TG$sumres), col = "grey", main = "CDF dla sum", xlim = c(0, max(TG$sumres)))
plot(ecdf(TG$sumresC), add = TRUE, col = "blue")
plot(ecdf(TG$sumresD), add = TRUE, lty = "dashed", col = "red")

plot(ecdf(TG$mres), col = "grey", main = "CDF dla średnich", xlim = c(0, max(TG$mresD)))
plot(ecdf(TG$mresC), add = TRUE, col = "blue")
plot(ecdf(TG$mresD), add = TRUE, lty = "dashed", col = "red")


anova_test(TG, mres ~ mresC + mresD)
anova_test(TG, mres ~ mresD)

# additional stuff
ggplot(TG, aes(x = as.factor(gossip_influence), y = difCDsd, fill = as.factor(reputation_threshold))) + geom_boxplot()

tg = read.csv("[name_of_dataset]", skip = 6, header = TRUE, sep = ",")

count(TG[which(TG$difCD > 0),])
count(TG[which(TG$difCD == 0),])
count(TG[which(TG$difCD < 0),])

count(tg[which(tg$d> 0),])
count(tg[which(tg$d == 0),])
count(tg[which(tg$d < 0),])

hist(tg$mres)
hist(tg$mresC)
hist(tg$mresD)

unique(tg$new_gossip_frequency)

ggplot(tg, aes(x = as.factor(prop_D), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(tg, aes(x = as.factor(network.type), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(tg, aes(x = as.factor(prop_D), y = mres, fill = as.factor(gossip_influence))) + geom_boxplot()
ggplot(tg, aes(x = as.factor(gossip.), y = mres, fill = as.factor(gossip_influence))) + geom_boxplot()
ggplot(tg, aes(x = as.factor(prop_D), y = mres, fill = as.factor(seeder_broadcasts...))) + geom_boxplot()
ggplot(tg, aes(x = as.factor(gossip.), y = mres, fill = as.factor(seeder_broadcasts...))) + geom_boxplot()

ggplot(tg, aes(x = as.factor(prop_D), y = mresC, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(tg, aes(x = as.factor(seeder_broadcasts...), y = mresC, fill = as.factor(gossip_influence))) + geom_boxplot()
ggplot(tg, aes(x = as.factor(prop_D), y = mresD, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(tg, aes(x = as.factor(seeder_broadcasts...), y = mresD, fill = as.factor(reputation_threshold))) + geom_boxplot()

tg$d = tg$mresC - tg$mresD
hist(tg$d)
tg$dsd = (tg$mresC - tg$mresD) / tg$sdres

  ggplot(tg, aes(x = d, fill = as.factor(prop_D))) +
  geom_histogram(color = "#e9ecef", alpha = 0.55, position = 'identity') +
  ylab("Częstotliwość") + xlab("Różnica wyników") + 
  labs(title = "Porównanie różnic wyników między C a D", fill = "Plotkowanie")

ggplot(tg, aes(x = dsd, fill = as.factor(reputation_threshold))) +
  geom_histogram(color = "#e9ecef", alpha = 0.15, position = 'identity', bins  = 60) +
  ylab("Częstotliwość") + xlab("Różnica w odchyleniach standardowych") + 
  labs(title = "Porównanie różnic wyników między C a D", fill = "Plotkowanie")
ggplot(tg, aes(x = dsd, fill = as.factor(prop_D))) +
  geom_histogram(color = "#e9ecef", alpha = 0.15, position = 'identity', bins  = 60) +
  ylab("Częstotliwość") + xlab("Różnica w odchyleniach standardowych") + 
  labs(title = "Porównanie różnic wyników między C a D", fill = "Plotkowanie")

ggplot(TG, aes(x = as.factor(prop_D), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot()
ggplot(TG, aes(x = as.factor(gossip.), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot()

lm01 = lm(data = tg, d ~ prop_D + reputation_threshold + gossip. + network.type)
anova(lm01)
summary(lm01)

lm02 = lm(data = tg, dsd ~ prop_D + reputation_threshold + gossip. + network.type)
anova(lm02)
summary(lm02)

tg$sumd = tg$sumresC - tg$sumresD
hist(tg$sumd)
tg$dsd = (tg$mresC - tg$mresD) / tg$sdres

ggplot(tg, aes(x = sumd, fill = as.factor(reputation_threshold))) +
  geom_histogram(color = "#e9ecef", alpha = 0.15, position = 'identity', bins  = 60) +
  ylab("Częstotliwość") + xlab("Różnica w odchyleniach standardowych") + 
  labs(title = "Porównanie różnic wyników między C a D", fill = "Plotkowanie")
ggplot(tg, aes(x = sumd, fill = as.factor(prop_D))) +
  geom_histogram(color = "#e9ecef", alpha = 0.15, position = 'identity', bins  = 60) +
  ylab("Częstotliwość") + xlab("Różnica w odchyleniach standardowych") + 
  labs(title = "Porównanie różnic wyników między C a D", fill = "Plotkowanie")

lm03 = lm(data = tg, sumd ~ prop_D + reputation_threshold + network.type)
anova(lm03)
summary(lm03)


plot(ecdf(tg$sumres), col = "grey", main = "CDF dla sum", xlim = c(0, max(tg$sumres)))
plot(ecdf(tg$sumresC), add = TRUE, col = "blue")
plot(ecdf(tg$sumresD), add = TRUE, lty = "dashed", col = "red")

plot(ecdf(tg$mres), col = "grey", main = "CDF dla średnich", xlim = c(0, max(tg$mresD)))
plot(ecdf(tg$mresC), add = TRUE, col = "blue")
plot(ecdf(tg$mresD), add = TRUE, lty = "dashed", col = "red")

ggplot(tg, aes(x = dsd, fill = as.factor(network.type))) +
  geom_histogram(color = "#e9ecef", alpha = 0.15, position = 'identity', bins  = 60) +
  ylab("Częstotliwość") + xlab("Różnica w odchyleniach standardowych") + 
  labs(title = "Porównanie różnic wyników między C a D", fill = "Plotkowanie")
ggplot(tg, aes(x = sumd, fill = as.factor(network.type))) +
  geom_histogram(color = "#e9ecef", alpha = 0.15, position = 'identity', bins  = 60) +
  ylab("Częstotliwość") + xlab("Różnica w odchyleniach standardowych") + 
  labs(title = "Porównanie różnic wyników między C a D", fill = "Plotkowanie")

ggplot(tg[which(tg$network.type == "WS71"),], aes(x = sumd, fill = as.factor(network.type))) +
  geom_histogram(color = "#e9ecef", alpha = 0.15, position = 'identity', bins  = 60) +
  ylab("Częstotliwość") + xlab("Różnica w odchyleniach standardowych") + 
  labs(title = "Porównanie różnic wyników między C a D", fill = "Plotkowanie")



sum(tg$sumresC) / sum(tg$sumres)
sum(tg$sumresD) / sum(tg$sumres)
count(tg[which(tg$sumd > 0),]) / count(tg)
count(tg[which(tg$sumd < 0),]) / count(tg)
count(tg[which(tg$d > 0),]) / count(tg)
count(tg[which(tg$d < 0),]) / count(tg)

sum(TG$sumresC) / sum(TG$sumres)
sum(TG$sumresD) / sum(TG$sumres)
count(TG[which(TG$sumd > 0),]) / count(TG)
count(TG[which(TG$sumd < 0),]) / count(TG)
count(TG[which(TG$difCD > 0),]) / count(TG)
count(TG[which(TG$difCD < 0),]) / count(TG)

rm(tg, kt, h1, reputation_threshold, difCD, i, x)

#
#
#
#
#
############################
##################################
#####################################
#
#
# Sensitivity Analyses


#
#diffusion
#


#reach realtalk

r1 = read.csv("[name_of_dataset]", skip = 6, header = TRUE, sep = ",")
r2 = read.csv("[name_of_dataset]", skip = 6, header = TRUE, sep = ",")

r = merge(r1, r2, all = TRUE)
rm(r1, r2)

r$f = r$precision..count.talkers.with..message.....count.talkers..2

hist(r[which(r$balance. == "true"),]$f)
hist(r[which(r$balance. == "false"),]$f)

#yb = r[which(r$balance. == "true" & r$f > 0.05),]$f
#nb = r[which(r$balance. == "false" & r$f > 0.05),]$f
yb = r[which(r$balance. == "true"),]$f
nb = r[which(r$balance. == "false"),]$f


t.test(yb, nb)

ybp = r[which(r$balance. == "true" & r$valence_gossip > 0),]$f
ybn = r[which(r$balance. == "true" & r$valence_gossip < 0),]$f
nbp = r[which(r$balance. == "false" & r$valence_gossip > 0),]$f
nbn = r[which(r$balance. == "false" & r$valence_gossip < 0),]$f

t.test(ybp, nbp)
t.test(ybn, nbn)
t.test(ybp, ybn)
t.test(nbp, nbn)

ks.test(yb, nb)
ks.test(ybp, nbp)
ks.test(ybn, nbn)
ks.test(ybp, ybn)
ks.test(nbp, nbn)

ggplot(r, aes(x = f, fill = balance.)) + geom_histogram(alpha = 0.45, position = "identity") +
  xlab("Wynik dyfuzji") + ylab("Częstotliwość")



#diffusion sensitivity




r1 = read.csv("[name_of_dataset]", skip = 6, header = TRUE, sep = ",")
r2 = read.csv("[name_of_dataset]", skip = 6, header = TRUE, sep = ",")


r = merge(r1, r2, all = TRUE)
rm(r1, r2)


ggplot(r, aes(x = as.factor(network.type), y = sum..rep..of.talkers, fill = as.factor(seeders))) + 
  geom_boxplot() + 
  ylab("Poziom redundancji") + xlab("Sieć") + labs(title = "Komunikacja", fill = "Ilość seedów")

ggplot(r, aes(x = precision..count.talkers.with..message.....count.talkers..2, y = sum..rep..of.talkers, color = as.factor(seeders))) +
  geom_point() +
  ylab("Poziom redundancji") + xlab("Wynik dyfuzji") + labs(title = "Redundancja ze względu na wynik dyfuzji", color = "Ilość seedów")

br = r[which(r$balance. == "true"),]$sum..rep..of.talkers
nbr = r[which(r$balance. == "false"),]$sum..rep..of.talkers
t.test(br,nbr)

#leaders

hist(r$count.talkers.with..hearhear.....maxhear., breaks = (n_distinct(r$count.talkers.with..hearhear.....maxhear.) / 3), main = "Histogram liderów", xlab = "Ilość liderów", ylab = "Częstotliwość")
hist(r[which(r$count.talkers.with..hearhear.....maxhear. < 18),]$count.talkers.with..hearhear.....maxhear., breaks = (n_distinct(r$count.talkers.with..hearhear.....maxhear.) / 3), main = "Histogram liderów", xlab = "Ilość liderów", ylab = "Częstotliwość")

ggplot(r, aes(x = count.talkers.with..hearhear.....maxhear., fill = balance.)) + geom_histogram(alpha = 0.45, position = "identity") +
  ylab("Częstość") + xlab("Liczba liderów")
ggplot(r, aes(x = count.talkers.with..hearhear.....maxhear., fill = as.factor(seeders))) + geom_histogram(alpha = 0.45, position = "identity") +
  ylab("Częstość") + xlab("Liczba liderów")

ggplot(r[which(r$precision..count.talkers.with..message.....count.talkers..2 > 0.04),], aes(x = count.talkers.with..hearhear.....maxhear., fill = network.type)) + geom_histogram(alpha = 0.45, position = "identity") +
  ylab("Częstość") + xlab("Liczba liderów")

ggplot(r, aes(x = count.talkers.with..hearhear.....maxhear., fill = network.type)) + geom_histogram(alpha = 0.45, position = "identity") +
  ylab("Częstość") + xlab("Liczba liderów")


ggplot(r, aes(x = as.factor(network.type), y = precision..count.talkers.with..message.....count.talkers..2, fill = as.factor(valence_gossip))) + 
  geom_boxplot() + 
  ylab("Wynik plotkowania") + xlab("Sieć") + labs(title = "Rozprzestrzenianie się plotki", fill = "Ładunek plotki")

ggplot(r, aes(x = as.factor(balance.), y = precision..count.talkers.with..message.....count.talkers..2, fill = as.factor(valence_gossip))) + 
  geom_boxplot() + 
  ylab("Wynik plotkowania") + xlab("Sieć") + labs(title = "Rozprzestrzenianie się plotki", fill = "Ładunek plotki")

ggplot(r, aes(x = as.factor(seeders), y = precision..count.talkers.with..message.....count.talkers..2, fill = as.factor(valence_gossip))) + 
  geom_boxplot() + 
  ylab("Wynik plotkowania") + xlab("Sieć") + labs(title = "Rozprzestrzenianie się plotki", fill = "Ładunek plotki")



ggplot(r, aes(x = as.factor(network.type), y = count.talkers.with..hearhear.....maxhear., fill = as.factor(valence_gossip))) + 
  geom_boxplot() + 
  ylab("Wynik plotkowania") + xlab("Sieć") + labs(title = "Rozprzestrzenianie się plotki", fill = "Ładunek plotki")

ggplot(r, aes(x = as.factor(balance.), y = count.talkers.with..hearhear.....maxhear., fill = as.factor(valence_gossip))) + 
  geom_boxplot() + 
  ylab("Wynik plotkowania") + xlab("Sieć") + labs(title = "Rozprzestrzenianie się plotki", fill = "Ładunek plotki")

ggplot(r, aes(x = as.factor(seeders), y = count.talkers.with..hearhear.....maxhear., fill = as.factor(valence_gossip))) + 
  geom_boxplot() + 
  ylab("Wynik plotkowania") + xlab("Sieć") + labs(title = "Rozprzestrzenianie się plotki", fill = "Ładunek plotki")


ggplot(r, aes(x = as.factor(network.type), y = precision..count.talkers.with..message.....count.talkers..2, fill = as.factor(valence_gossip))) + 
  geom_boxplot() + 
  ylab("Wynik plotkowania") + xlab("Sieć") + labs(title = "Rozprzestrzenianie się plotki", fill = "Ładunek plotki")

ggplot(r, aes(x = as.factor(network.type), y = precision..count.talkers.with..message.....count.talkers..2, fill = as.factor(seeders))) + 
  geom_boxplot() + 
  ylab("Wynik plotkowania") + xlab("Sieć") + labs(title = "Rozprzestrzenianie się plotki", fill = "Ładunek plotki")

ggplot(r, aes(x = as.factor(network.type), y = precision..count.talkers.with..message.....count.talkers..2, fill = as.factor(balance.))) + 
  geom_boxplot() + 
  ylab("Wynik plotkowania") + xlab("Sieć") + labs(title = "Rozprzestrzenianie się plotki", fill = "Ładunek plotki")

ggplot(r, aes(x = as.factor(new_gossip_frequency), y = precision..count.talkers.with..message.....count.talkers..2, fill = as.factor(valence_gossip))) + 
  geom_boxplot() + 
  ylab("Wynik plotkowania") + xlab("Sieć") + labs(title = "Rozprzestrzenianie się plotki", fill = "Ładunek plotki")



#
#
#centralities

unique(r$network.type)
[1] "hungarian_firm_1"    "hungarian_firm_1a"   "hungarian_firm_2"    "hungarian_firm_2a"  
[5] "hungarian_firm_6"    "hungarian_firm_6a"   "hungarian_school_1"  "hungarian_school_1a"
[9] "hungarian_school_3"  "hungarian_school_3a" "hungarian_school_6"  "hungarian_school_6a"

"hungarian_school_1.gml"
"hungarian_firm_1_.gml"

"hungarian_school_1_undirsign.gml"
"hungarian_firm_1_undirsign.gml"

g1 = read.graph("hungarian_firm_6.gml", format = "gml")
degree(g1)
gn = degree(g1)

rg = r[which(r$network.type == "hungarian_firm_6"),]$X.degree..of.talkers.with..hearhear.....maxhear.

j = sub('.*\\[(.*)\\].*', '\\1', rg)
h = regmatches(j, gregexpr("[[:digit:]]+", j))
h = as.numeric(unlist(h))

g2 = read.graph("hungarian_firm_6_undirsign.gml", format = "gml")
degree(g2)
gn1 = degree(g2)

rg1 = r[which(r$network.type == "hungarian_firm_6a"),]$X.degree..of.talkers.with..hearhear.....maxhear.

j = sub('.*\\[(.*)\\].*', '\\1', rg1)
h1 = regmatches(j, gregexpr("[[:digit:]]+", j))
h1 = as.numeric(unlist(h1))

datH = hist(h, breaks = n_distinct(h), plot = FALSE)
degH = hist(gn, breaks = n_distinct(gn), plot = FALSE)
datH1 = hist(h1, breaks = n_distinct(h1), plot = FALSE)
degH1 = hist(gn1, breaks = n_distinct(gn1), plot = FALSE)
par(mfcol = c(2,2))
plot(degH, col = "grey", xlab = "stopień", main = "Histogram stopnia")
plot(datH, col = "red", xlab = "stopień", main = "Stopień liderów")
plot(degH1, col = "grey", xlab = "stopień", main = "Histogram stopnia")
plot(datH1, col = "red", xlab = "stopień", main = "Stopień liderów")


t.test(gn, h)
t.test(gn1, h1)
t.test(gn, gn1)
t.test(h, h1)


#po wyeliminowaniu zer
rx = r[which(r$mean..hearhear..of.talkers != 0),]

ggplot(rx, aes(x = as.factor(new_gossip_frequency), y = count.talkers.with..hearhear.....maxhear., fill = as.factor(valence_gossip))) +
  geom_boxplot() +
  ylab("Liczba najlepiej poinformowanych") + xlab("Nowa plotka co") + 
  labs(title = "Różnice w sukcesie odbiorania plotki", fill = "Walencja plotki")

ggplot(rx, aes(x = as.factor(new_gossip_frequency), y = mean..hearhear..of.talkers, fill = as.factor(valence_gossip))) +
  geom_boxplot() +
  ylab("Średni wynik w odbieraniu") + xlab("Nowa plotka co") + 
  labs(title = "Różnice w sukcesie odbiorania plotki", fill = "Walencja plotki")

rxb = rx[which(rx$balance. == "true"),]

ggplot(rxb, aes(x = as.factor(new_gossip_frequency), y = count.talkers.with..hearhear.....maxhear., fill = as.factor(valence_gossip))) +
  geom_boxplot() +
  ylab("Liczba najlepiej poinformowanych") + xlab("Nowa plotka co") + 
  labs(title = "Różnice w sukcesie odbiorania plotki w warunkach zbalansowanych", fill = "Walencja plotki")

ggplot(rxb, aes(x = as.factor(new_gossip_frequency), y = mean..hearhear..of.talkers, fill = as.factor(valence_gossip))) +
  geom_boxplot() +
  ylab("Średni wynik w odbieraniu") + xlab("Nowa plotka co") + 
  labs(title = "Różnice w sukcesie odbiorania plotki w warunkach zbalansowanych", fill = "Walencja plotki")

rxnb = rx[which(rx$balance. == "false"),]

ggplot(rxnb, aes(x = as.factor(new_gossip_frequency), y = count.talkers.with..hearhear.....maxhear., fill = as.factor(valence_gossip))) +
  geom_boxplot() +
  ylab("Liczba najlepiej poinformowanych") + xlab("Nowa plotka co") + 
  labs(title = "Różnice w sukcesie odbiorania plotki w warunkach niezbalanowanych", fill = "Walencja plotki")

ggplot(rxnb, aes(x = as.factor(new_gossip_frequency), y = mean..hearhear..of.talkers, fill = as.factor(valence_gossip))) +
  geom_boxplot() +
  ylab("Średni wynik w odbieraniu") + xlab("Nowa plotka co") + 
  labs(title = "Różnice w sukcesie odbiorania plotki w warunkach niezbalanowanych", fill = "Walencja plotki")

t.test(rxb$mean..hearhear..of.talkers, rxnb$mean..hearhear..of.talkers)
t.test(rxb[which(rxb$valence_gossip == 2),]$mean..hearhear..of.talkers, rxnb[which(rxb$valence_gossip == 2),]$mean..hearhear..of.talkers)
t.test(rxb[which(rxb$valence_gossip == -2),]$mean..hearhear..of.talkers, rxnb[which(rxnb$valence_gossip == -2),]$mean..hearhear..of.talkers)

# trustgame

rm(d)

r1 = read.csv("[name_of_dataset]", skip = 6, header = TRUE, sep = ",")
r2 = read.csv("[name_of_dataset]", skip = 6, header = TRUE, sep = ",")

r = merge(r1, r2, all = TRUE)
rm(r1, r2)


r$d = r$mean..resource..of.talkers.with..strategy....C.. - r$mean..resource..of.talkers.with..strategy....D..
hist(r$d)
r$sdmd = r$d / r$standard.deviation..resource..of.talkers
hist(r$sdmd)

ggplot(r, aes(x = sdmd, fill = as.factor(balance.))) +
  geom_histogram(color = "#e9ecef", alpha = 0.35, position = 'identity') +
  ylab("Częstotliwość") + xlab("Różnica wyników") + 
  labs(title = "Porównanie różnic wyników między C a D", fill = "Plotkowanie")

ggplot(r, aes(x = sdmd, fill = as.factor(reputation_threshold))) +
  geom_histogram(color = "#e9ecef", alpha = 0.15, position = 'identity') +
  ylab("Częstotliwość") + xlab("Różnica w odchyleniach standardowych") + 
  labs(title = "Porównanie różnic wyników między C a D", fill = "Plotkowanie")

ggplot(r, aes(x = d, fill = as.factor(prop_D))) +
  geom_histogram(color = "#e9ecef", alpha = 0.15, position = 'identity', bins  = 60) +
  ylab("Częstotliwość") + xlab("Różnica w odchyleniach standardowych") + 
  labs(title = "Porównanie różnic wyników między C a D", fill = "Plotkowanie")

ggplot(r, aes(x = d, fill = as.factor(valence_gossip))) +
  geom_histogram(color = "#e9ecef", alpha = 0.55, position = 'identity') +
  ylab("Częstotliwość") + xlab("Różnica wyników") + 
  labs(title = "Porównanie różnic wyników między C a D", fill = "Plotkowanie")

ggplot(r, aes(x = d, fill = as.factor(network.type == "hungarian_school_1a"))) +
  geom_histogram(color = "#e9ecef", alpha = 0.25, position = 'identity') +
  ylab("Częstotliwość") + xlab("Różnica wyników") + 
  labs(title = "Porównanie różnic wyników między C a D", fill = "Plotkowanie")

library(broom)
lm01 = lm(data = r, d ~ prop_D + reputation_threshold + balance. + network.type + reputation_influence)
anova(lm01)
tidy(lm01)

write.csv(tidy(lm01), file = "coef.cvs", quote = "all")

r$mC = r$mean..resource..of.talkers.with..strategy....C..
r$mD = r$mean..resource..of.talkers.with..strategy....D..
r$mres = r$mean..resource..of.talkers

ks.test(r$mC, r$mD)

t.test(r$mC, r$mD)

ggplot(r, aes(x = as.factor(balance.), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot() +
  ylab("Średni wynik") + xlab("Czy odbywa sie plotkowanie?") + 
  labs(title = "Porównanie średnich wyników dla stopnia zrównoważenia grafu", fill = "Próg")
ggplot(r, aes(x = as.factor(balance.), y = mres, fill = as.factor(prop_D))) + geom_boxplot() +
  ylab("Średni wynik") + xlab("Czy odbywa sie plotkowanie?") + 
  labs(title = "", fill = "Ilość D")

r$z1 = ifelse(r$d >= 0, TRUE, FALSE)

ggplot(r, aes(x = as.factor(prop_D), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot() +
  ylab("Średni wynik") + xlab("Ilość D") + 
  labs(title = "", fill = "Próg")
ggplot(r, aes(x = as.factor(prop_D), y = mC, fill = as.factor(reputation_threshold))) + geom_boxplot() +
  ylab("Średni wynik C") + xlab("Ilość D") + 
  labs(title = "", fill = "Próg")
ggplot(r, aes(x = as.factor(prop_D), y = mD, fill = as.factor(reputation_threshold))) + geom_boxplot() +
  ylab("Średni wynik D") + xlab("Ilość D") + 
  labs(title = "", fill = "Próg")

ggplot(r, aes(x = as.factor(z1), y = mres, fill = as.factor(reputation_threshold))) + geom_boxplot() +
  ylab("Średni wynik") + xlab("Czy wygrywają C?") + 
  labs(title = "", fill = "Próg")
ggplot(r, aes(x = as.factor(z1), y = mC, fill = as.factor(reputation_threshold))) + geom_boxplot() +
  ylab("Średni wynik C") + xlab("Czy wygrywają C?") + 
  labs(title = "", fill = "Próg")
ggplot(r, aes(x = as.factor(z1), y = mD, fill = as.factor(reputation_threshold))) + geom_boxplot() +
  ylab("Średni wynik D") + xlab("Czy wygrywają C?") + 
  labs(title = "", fill = "Próg")

ggplot(r, aes(x = as.factor(z1), y = mres, fill = as.factor(prop_D))) + geom_boxplot() +
  ylab("Średni wynik") + xlab("Czy wygrywają C?") + 
  labs(title = "", fill = "Ilość D")
ggplot(r, aes(x = as.factor(z1), y = mC, fill = as.factor(prop_D))) + geom_boxplot() +
  ylab("Średni wynik C") + xlab("Czy wygrywają C?") + 
  labs(title = "", fill = "Ilość D")
ggplot(r, aes(x = as.factor(z1), y = mD, fill = as.factor(prop_D))) + geom_boxplot() +
  ylab("Średni wynik D") + xlab("Czy wygrywają C?") + 
  labs(title = "", fill = "Ilość D")



hist(r$standard.deviation..resource..of.talkers)
hist(r$standard.deviation..resource..of.talkers.with..strategy....C..)
hist(r$standard.deviation..resource..of.talkers.with..strategy....D..)

plot(r$standard.deviation..resource..of.talkers, r$standard.deviation..resource..of.talkers.with..strategy....C..)
plot(r$standard.deviation..resource..of.talkers, r$standard.deviation..resource..of.talkers.with..strategy....D..)


lm02 = lm(data = r, mres ~ prop_D + reputation_threshold + balance. + network.type)
anova(lm02)
summary(lm02)
write.csv(tidy(lm02),"coef2.cvs")

#
#
#
#
#
#
#
#
##########################
###############################
####################################
#
#
#
#
#END
